{"version":3,"sources":["components/Color/Color.js","components/Write/Write.js","components/Eraser/Eraser.js","components/Reset/Reset.js","components/Controls/Controls.js","components/Board/Board.js","App.js","serviceWorker.js","index.js"],"names":["Color","props","useState","displayed","setDisplayed","color","setColor","className","onClick","title","icon","faPalette","style","position","zIndex","top","right","bottom","left","onChange","pickerColor","hex","handleColor","Write","faPen","startWrite","Eraser","faEraser","setEraseState","Reset","faRecycle","e","preventDefault","resetPage","Controls","Board","canvasRef","React","useRef","parentRef","ctx","setCtx","x","y","canvasOffset","setCanvasOffset","drawing","setDrawing","setPosition","erase","useEffect","canv","current","width","offsetWidth","height","offsetHeight","canvCtx","getContext","ref","clearRect","onMouseDown","offset","getBoundingClientRect","parseInt","clientX","clientY","onMouseUp","onMouseMove","mousex","mousey","strokeStyle","beginPath","moveTo","lineTo","lineWidth","lineJoin","lineCap","stroke","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.03feed86.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport { ChromePicker } from \"react-color\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faPalette } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nfunction Color(props) {\r\n  const popover = {\r\n    position: \"absolute\",\r\n    zIndex: \"2\",\r\n  };\r\n  const cover = {\r\n    position: \"fixed\",\r\n    top: \"0px\",\r\n    right: \"0px\",\r\n    bottom: \"0px\",\r\n    left: \"0px\",\r\n  };\r\n  const [displayed, setDisplayed] = useState(false);\r\n  const [color, setColor] = useState(\"#000000\");\r\n\r\n  function handleClick() {\r\n    setDisplayed(true);\r\n  }\r\n\r\n  function handleClose() {\r\n    setDisplayed(false);\r\n  }\r\n\r\n  function handleChange(pickerColor) {\r\n    setColor(pickerColor.hex);\r\n    props.handleColor(pickerColor.hex);\r\n  }\r\n\r\n  return (\r\n    <div className=\"color\">\r\n      <FontAwesomeIcon\r\n        onClick={handleClick}\r\n        title=\"choose color\"\r\n        className=\"fa-icon\"\r\n        icon={faPalette}\r\n      />\r\n      {displayed ? (\r\n        <div style={popover}>\r\n          <div style={cover} onClick={handleClose} />\r\n          <ChromePicker color={color} onChange={handleChange} />\r\n        </div>\r\n      ) : null}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Color;\r\n","import React from 'react';\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faPen } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nfunction Write(props) {  \r\n    return (\r\n      <div className=\"eraser\">\r\n        <FontAwesomeIcon\r\n          title=\"reset\"\r\n          icon={faPen}\r\n          className=\"fa-icon\"\r\n          onClick={() => props.startWrite()}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n  \r\n  export default Write;","import React from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faEraser } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nfunction Eraser(props) {\r\n  return (\r\n    <div className=\"eraser\">\r\n      <FontAwesomeIcon\r\n        title=\"erase\"\r\n        icon={faEraser}\r\n        className=\"fa-icon\"\r\n        onClick={() => props.setEraseState(true)}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Eraser;\r\n","import React from 'react';\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faRecycle } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nfunction Reset(props) {\r\n    function handleReset(e) {\r\n      e.preventDefault();\r\n      props.resetPage();\r\n    }\r\n  \r\n    return (\r\n      <div className=\"eraser\">\r\n        <FontAwesomeIcon\r\n          title=\"reset\"\r\n          icon={faRecycle}\r\n          className=\"fa-icon\"\r\n          onClick={handleReset}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n  \r\n  export default Reset;","import React from \"react\";\r\nimport \"./Controls.css\";\r\nimport Color from \"../Color/Color\";\r\nimport Write from \"../Write/Write\";\r\nimport Eraser from \"../Eraser/Eraser\";\r\nimport Reset from \"../Reset/Reset\";\r\n\r\nfunction Controls(props) {\r\n  return (\r\n    <div className=\"controls\">\r\n      <Color handleColor={props.handleColor} />\r\n      <Write startWrite={props.startWrite} />\r\n      <Eraser setEraseState={props.setEraseState} />\r\n      <Reset resetPage={props.resetPage}/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Controls;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport \"./Board.css\";\r\nimport Controls from \"../Controls/Controls\";\r\n\r\nfunction Board() {\r\n  const canvasRef = React.useRef(null);\r\n  const parentRef = React.useRef(null);\r\n  const [ctx, setCtx] = useState({});\r\n  const [canvasOffset, setCanvasOffset] = useState({ x: 0, y: 0 });\r\n  const [drawing, setDrawing] = useState(false);\r\n  const [position, setPosition] = useState({ x: 0, y: 0 });\r\n  const [color, setColor] = useState(\"#000000\");\r\n  const [erase, setEraseState] = useState(false);\r\n\r\n  useEffect(() => {\r\n    let canv = canvasRef.current;\r\n    canv.width = parentRef.current.offsetWidth;\r\n    canv.height = parentRef.current.offsetHeight;\r\n\r\n    let canvCtx = canv.getContext(\"2d\");\r\n    setCtx(canvCtx);\r\n  }, [ctx]);\r\n\r\n  function handleMouseDown(e) {\r\n    setDrawing(true);\r\n    let offset = canvasRef.current.getBoundingClientRect();\r\n    setCanvasOffset({ x: parseInt(offset.left), y: parseInt(offset.top) });\r\n    setPosition({\r\n      x: parseInt(e.clientX - offset.left),\r\n      y: parseInt(e.clientY - offset.top),\r\n    });\r\n  }\r\n  function handleMouseUp() {\r\n    setDrawing(false);\r\n  }\r\n\r\n  function handleMouseMove(e) {\r\n    let mousex = e.clientX - canvasOffset.x;\r\n    let mousey = e.clientY - canvasOffset.y;\r\n    if (drawing) {\r\n      ctx.strokeStyle = erase ? \"#ffffff\" : color;\r\n      ctx.beginPath();\r\n      ctx.moveTo(position.x, position.y);\r\n      ctx.lineTo(mousex, mousey);\r\n      ctx.lineWidth = 5;\r\n      ctx.lineJoin = \"round\";\r\n      ctx.lineCap = \"round\";\r\n      ctx.stroke();\r\n    }\r\n    setPosition({ x: mousex, y: mousey });\r\n  }\r\n\r\n  function handleColor(color) {\r\n    setColor(color);\r\n    setEraseState(false);\r\n  }\r\n\r\n  const startWrite = () => {\r\n    setEraseState(false);\r\n  } \r\n\r\n  const resetPage = () => {\r\n    let canv = canvasRef.current;\r\n    canv.width = parentRef.current.offsetWidth;\r\n    canv.height = parentRef.current.offsetHeight;\r\n    const context = canv.getContext('2d');\r\n    context.clearRect(0, 0, canv.width, canv.height);\r\n  }\r\n\r\n  return (\r\n    <div className=\"board\" ref={parentRef}>\r\n      <Controls handleColor={handleColor} resetPage={resetPage} setEraseState={setEraseState} startWrite={startWrite}/>\r\n      <canvas\r\n        ref={canvasRef}\r\n        onMouseDown={handleMouseDown}\r\n        onMouseUp={handleMouseUp}\r\n        onMouseMove={handleMouseMove}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Board;\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport Board from \"./components/Board/Board\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"app\">\r\n      <Board />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}